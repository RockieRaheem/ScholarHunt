rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Blog posts collection - unconditional public read (TOP PRIORITY)
    match /blog/{postId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && (
        (
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data["role"] == "admin"
        ) ||
        (request.auth.email == "mutaawe38@gmail.com")
      );
    }
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    // Helper function to validate scholarship data
    function isValidScholarship(data) {
      return data.keys().hasAll(["title", "description", "amount", "deadline", "status"]) &&
        (data["title"] is string && data["title"].size() > 0) &&
        (data["description"] is string && data["description"].size() > 0) &&
        (data["amount"] is string && data["amount"].size() > 0) &&
        (data["deadline"] is string) &&
        (data["status"] in ["active", "draft", "expired"]);
    }
    // Helper function to validate blog post data
    function isValidBlogPost(data) {
      return data.keys().hasAll(["title", "content", "excerpt", "author", "status"]) &&
        (data["title"] is string && data["title"].size() > 0) &&
        (data["content"] is string && data["content"].size() > 0) &&
        (data["excerpt"] is string && data["excerpt"].size() > 0) &&
        (data["author"] is string && data["author"].size() > 0) &&
        (data["status"] in ["published", "draft", "archived"]);
    }
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow delete: if isAdmin();
    }
    // Scholarships collection
    match /scholarships/{scholarshipId} {
      allow read: if true;
      allow create: if isAdmin() && isValidScholarship(request.resource.data);
      allow update: if isAdmin() && isValidScholarship(request.resource.data);
      allow delete: if isAdmin();
      match /views/{viewId} {
        allow read, write: if isAuthenticated();
      }
    }
    // Newsletter subscriptions
    match /newsletter/{email} {
      allow create: if request.resource.data.keys().hasAll(["email", "subscribedAt", "isActive"]) &&
        request.resource.data.email is string &&
        request.resource.data.isActive == true;
      allow update: if request.resource.data.keys().hasAll(["isActive"]) &&
        request.resource.data.isActive == false;
      allow read: if isAdmin();
      allow delete: if isAdmin();
    }
    // User applications to scholarships
    match /applications/{applicationId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId || isAdmin();
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId || isAdmin();
      allow create: if isAuthenticated();
    }
    // Saved scholarships for users
    match /userSavedScholarships/{userId} {
      allow read, write: if isOwner(userId);
      match /scholarships/{scholarshipId} {
        allow read, write: if isOwner(userId);
      }
    }
    // Scholarship submissions from public form
    match /scholarshipSubmissions/{submissionId} {
      allow create: if request.resource.data.keys().hasAll([
        'title', 'description', 'provider', 'amount', 'deadline', 
        'submitterName', 'submitterEmail', 'status', 'submittedAt'
      ]) && request.resource.data.status == 'pending';
      allow read, update, delete: if isAdmin();
    }
    // User feedback and contact messages
    match /feedback/{feedbackId} {
      allow create: if request.resource.data.keys().hasAll(['name', 'email', 'message', 'createdAt']);
      allow read, update, delete: if isAdmin();
    }
    // Analytics and metrics (admin only)
    match /analytics/{doc} {
      allow read, write: if isAdmin();
    }
    // Site settings and configuration (admin only)
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    // Search history and popular terms
    match /searchMetrics/{metricId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAdmin();
    }
    // Notification system
    match /notifications/{userId} {
      allow read, write: if isOwner(userId);
      match /messages/{messageId} {
        allow read: if isOwner(userId);
        allow write: if isAdmin();
        allow update: if isOwner(userId);
      }
    }
    // User activity logs
    match /userActivity/{activityId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin();
    }
    // Activities collection
    match /activities/{activityId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAdmin();
    }
    // Page views collection
    match /pageViews/{viewId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }
  }
}